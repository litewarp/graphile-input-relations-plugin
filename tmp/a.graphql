type Child implements Node {
  """
  Reads a single `Parent` that is related to this `Child`.
  """
  dadParent: Parent
  dadParentId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `Parent` that is related to this `Child`.
  """
  momParent: Parent
  momParentId: Int
  name: String!
  rowId: Int!

  """
  Reads and enables pagination through a set of `Student`.
  """
  studentsByStudentId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StudentCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Student`.
    """
    orderBy: [StudentOrderBy!] = [PRIMARY_KEY_ASC]
  ): StudentConnection!
}

"""
Relationship connect by node id input field for child in the childByMyStudentId relationship
"""
input ChildByMyStudentIdConnectByNodeIdInput {
  """
  The node id input field to connect child in the childByMyStudentId relationship
  """
  id: ID!
}

"""
The Child to be created by this mutation.
"""
input ChildByMyStudentIdCreateInput {
  dadParentId: Int
  momParentId: Int
  name: String!

  """
  Nested connector type for parentByMyDadParentId
  """
  parentByDadParentId: ParentByMyDadParentIdInput

  """
  Nested connector type for parentByMyMomParentId
  """
  parentByMomParentId: ParentByMyMomParentIdInput
  rowId: Int

  """
  Nested connector type for studentsByTheirStudentId
  """
  studentsByStudentId: StudentsByTheirStudentIdInput
}

"""
Relationship input type for childByMyStudentId
"""
input ChildByMyStudentIdInput {
  """
  Connect child by node id in the childByMyStudentId relationship
  """
  connectById: ChildByMyStudentIdConnectByNodeIdInput

  """
  A Child created and linked to this object
  """
  create: ChildByMyStudentIdCreateInput
}

"""
A condition to be used against `Child` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChildCondition {
  """
  Checks for equality with the object’s `dadParentId` field.
  """
  dadParentId: Int

  """
  Checks for equality with the object’s `momParentId` field.
  """
  momParentId: Int

  """
  Checks for equality with the object’s `rowId` field.
  """
  rowId: Int
}

"""
A connection to a list of `Child` values.
"""
type ChildConnection {
  """
  A list of edges which contains the `Child` and cursor to aid in pagination.
  """
  edges: [ChildEdge]!

  """
  A list of `Child` objects.
  """
  nodes: [Child]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Child` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Child` edge in the connection.
"""
type ChildEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Child` at the end of the edge.
  """
  node: Child
}

"""
An input for mutations affecting `Child`
"""
input ChildInput {
  dadParentId: Int
  momParentId: Int
  name: String!

  """
  Nested connector type for parentByMyDadParentId
  """
  parentByDadParentId: ParentByMyDadParentIdInput

  """
  Nested connector type for parentByMyMomParentId
  """
  parentByMomParentId: ParentByMyMomParentIdInput
  rowId: Int

  """
  Nested connector type for studentsByTheirStudentId
  """
  studentsByStudentId: StudentsByTheirStudentIdInput
}

"""
Methods to use when ordering `Child`.
"""
enum ChildOrderBy {
  DAD_PARENT_ID_ASC
  DAD_PARENT_ID_DESC
  ID_ASC
  ID_DESC
  MOM_PARENT_ID_ASC
  MOM_PARENT_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Child`. Fields that are set will be updated.
"""
input ChildPatch {
  dadParentId: Int
  momParentId: Int
  name: String

  """
  Nested connector type for parentByMyDadParentId
  """
  parentByDadParentId: ParentByMyDadParentIdInput

  """
  Nested connector type for parentByMyMomParentId
  """
  parentByMomParentId: ParentByMyMomParentIdInput
  rowId: Int

  """
  Nested connector type for studentsByTheirStudentId
  """
  studentsByStudentId: StudentsByTheirStudentIdInput
}

"""
Relationship connect by node id input field for child in the childrenByTheirDadParentId relationship
"""
input ChildrenByTheirDadParentIdConnectByNodeIdInput {
  """
  The node id input field to connect child in the childrenByTheirDadParentId relationship
  """
  id: ID!
}

"""
The Child to be created by this mutation.
"""
input ChildrenByTheirDadParentIdCreateInput {
  dadParentId: Int
  momParentId: Int
  name: String!

  """
  Nested connector type for parentByMyDadParentId
  """
  parentByDadParentId: ParentByMyDadParentIdInput

  """
  Nested connector type for parentByMyMomParentId
  """
  parentByMomParentId: ParentByMyMomParentIdInput
  rowId: Int

  """
  Nested connector type for studentsByTheirStudentId
  """
  studentsByStudentId: StudentsByTheirStudentIdInput
}

"""
Relationship input type for childrenByTheirDadParentId
"""
input ChildrenByTheirDadParentIdInput {
  """
  Connect child by node id in the childrenByTheirDadParentId relationship
  """
  connectById: [ChildrenByTheirDadParentIdConnectByNodeIdInput!]

  """
  A Child created and linked to this object
  """
  create: [ChildrenByTheirDadParentIdCreateInput!]
}

"""
Relationship connect by node id input field for child in the childrenByTheirMomParentId relationship
"""
input ChildrenByTheirMomParentIdConnectByNodeIdInput {
  """
  The node id input field to connect child in the childrenByTheirMomParentId relationship
  """
  id: ID!
}

"""
The Child to be created by this mutation.
"""
input ChildrenByTheirMomParentIdCreateInput {
  dadParentId: Int
  momParentId: Int
  name: String!

  """
  Nested connector type for parentByMyDadParentId
  """
  parentByDadParentId: ParentByMyDadParentIdInput

  """
  Nested connector type for parentByMyMomParentId
  """
  parentByMomParentId: ParentByMyMomParentIdInput
  rowId: Int

  """
  Nested connector type for studentsByTheirStudentId
  """
  studentsByStudentId: StudentsByTheirStudentIdInput
}

"""
Relationship input type for childrenByTheirMomParentId
"""
input ChildrenByTheirMomParentIdInput {
  """
  Connect child by node id in the childrenByTheirMomParentId relationship
  """
  connectById: [ChildrenByTheirMomParentIdConnectByNodeIdInput!]

  """
  A Child created and linked to this object
  """
  create: [ChildrenByTheirMomParentIdCreateInput!]
}

"""
All input for the create `Child` mutation.
"""
input CreateChildInput {
  """
  The `Child` to be created by this mutation.
  """
  child: ChildInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""
The output of our create `Child` mutation.
"""
type CreateChildPayload {
  """
  The `Child` that was created by this mutation.
  """
  child: Child

  """
  An edge for our `Child`. May be used by Relay 1.
  """
  childEdge(
    """
    The method to use when ordering `Child`.
    """
    orderBy: [ChildOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ChildEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the create `Parent` mutation.
"""
input CreateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Parent` to be created by this mutation.
  """
  parent: ParentInput!
}

"""
The output of our create `Parent` mutation.
"""
type CreateParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Parent` that was created by this mutation.
  """
  parent: Parent

  """
  An edge for our `Parent`. May be used by Relay 1.
  """
  parentEdge(
    """
    The method to use when ordering `Parent`.
    """
    orderBy: [ParentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ParentEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the create `School` mutation.
"""
input CreateSchoolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `School` to be created by this mutation.
  """
  school: SchoolInput!
}

"""
The output of our create `School` mutation.
"""
type CreateSchoolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `School` that was created by this mutation.
  """
  school: School

  """
  An edge for our `School`. May be used by Relay 1.
  """
  schoolEdge(
    """
    The method to use when ordering `School`.
    """
    orderBy: [SchoolOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SchoolEdge
}

"""
All input for the create `Student` mutation.
"""
input CreateStudentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Student` to be created by this mutation.
  """
  student: StudentInput!
}

"""
The output of our create `Student` mutation.
"""
type CreateStudentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `Student` that was created by this mutation.
  """
  student: Student

  """
  An edge for our `Student`. May be used by Relay 1.
  """
  studentEdge(
    """
    The method to use when ordering `Student`.
    """
    orderBy: [StudentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): StudentEdge
}

"""
All input for the create `Teacher` mutation.
"""
input CreateTeacherInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Teacher` to be created by this mutation.
  """
  teacher: TeacherInput!
}

"""
The output of our create `Teacher` mutation.
"""
type CreateTeacherPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `Teacher` that was created by this mutation.
  """
  teacher: Teacher

  """
  An edge for our `Teacher`. May be used by Relay 1.
  """
  teacherEdge(
    """
    The method to use when ordering `Teacher`.
    """
    orderBy: [TeacherOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TeacherEdge
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
All input for the `deleteChildById` mutation.
"""
input DeleteChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Child` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteChild` mutation.
"""
input DeleteChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""
The output of our delete `Child` mutation.
"""
type DeleteChildPayload {
  """
  The `Child` that was deleted by this mutation.
  """
  child: Child

  """
  An edge for our `Child`. May be used by Relay 1.
  """
  childEdge(
    """
    The method to use when ordering `Child`.
    """
    orderBy: [ChildOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ChildEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChildId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteParentById` mutation.
"""
input DeleteParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Parent` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteParent` mutation.
"""
input DeleteParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""
The output of our delete `Parent` mutation.
"""
type DeleteParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedParentId: ID

  """
  The `Parent` that was deleted by this mutation.
  """
  parent: Parent

  """
  An edge for our `Parent`. May be used by Relay 1.
  """
  parentEdge(
    """
    The method to use when ordering `Parent`.
    """
    orderBy: [ParentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ParentEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteSchoolById` mutation.
"""
input DeleteSchoolByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `School` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteSchool` mutation.
"""
input DeleteSchoolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""
The output of our delete `School` mutation.
"""
type DeleteSchoolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSchoolId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `School` that was deleted by this mutation.
  """
  school: School

  """
  An edge for our `School`. May be used by Relay 1.
  """
  schoolEdge(
    """
    The method to use when ordering `School`.
    """
    orderBy: [SchoolOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SchoolEdge
}

"""
All input for the `deleteStudentById` mutation.
"""
input DeleteStudentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Student` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteStudent` mutation.
"""
input DeleteStudentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  schoolId: Int!
  studentId: Int!
}

"""
The output of our delete `Student` mutation.
"""
type DeleteStudentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedStudentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `Student` that was deleted by this mutation.
  """
  student: Student

  """
  An edge for our `Student`. May be used by Relay 1.
  """
  studentEdge(
    """
    The method to use when ordering `Student`.
    """
    orderBy: [StudentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): StudentEdge
}

"""
All input for the `deleteTeacherById` mutation.
"""
input DeleteTeacherByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Teacher` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteTeacher` mutation.
"""
input DeleteTeacherInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  otherId: Int!
}

"""
The output of our delete `Teacher` mutation.
"""
type DeleteTeacherPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTeacherId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `Teacher` that was deleted by this mutation.
  """
  teacher: Teacher

  """
  An edge for our `Teacher`. May be used by Relay 1.
  """
  teacherEdge(
    """
    The method to use when ordering `Teacher`.
    """
    orderBy: [TeacherOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TeacherEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `Child`.
  """
  createChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChildInput!
  ): CreateChildPayload

  """
  Creates a single `Parent`.
  """
  createParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateParentInput!
  ): CreateParentPayload

  """
  Creates a single `School`.
  """
  createSchool(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSchoolInput!
  ): CreateSchoolPayload

  """
  Creates a single `Student`.
  """
  createStudent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStudentInput!
  ): CreateStudentPayload

  """
  Creates a single `Teacher`.
  """
  createTeacher(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeacherInput!
  ): CreateTeacherPayload

  """
  Deletes a single `Child` using a unique key.
  """
  deleteChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildInput!
  ): DeleteChildPayload

  """
  Deletes a single `Child` using its globally unique id.
  """
  deleteChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChildByIdInput!
  ): DeleteChildPayload

  """
  Deletes a single `Parent` using a unique key.
  """
  deleteParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentInput!
  ): DeleteParentPayload

  """
  Deletes a single `Parent` using its globally unique id.
  """
  deleteParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteParentByIdInput!
  ): DeleteParentPayload

  """
  Deletes a single `School` using a unique key.
  """
  deleteSchool(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSchoolInput!
  ): DeleteSchoolPayload

  """
  Deletes a single `School` using its globally unique id.
  """
  deleteSchoolById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSchoolByIdInput!
  ): DeleteSchoolPayload

  """
  Deletes a single `Student` using a unique key.
  """
  deleteStudent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStudentInput!
  ): DeleteStudentPayload

  """
  Deletes a single `Student` using its globally unique id.
  """
  deleteStudentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStudentByIdInput!
  ): DeleteStudentPayload

  """
  Deletes a single `Teacher` using a unique key.
  """
  deleteTeacher(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeacherInput!
  ): DeleteTeacherPayload

  """
  Deletes a single `Teacher` using its globally unique id.
  """
  deleteTeacherById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeacherByIdInput!
  ): DeleteTeacherPayload

  """
  Updates a single `Child` using a unique key and a patch.
  """
  updateChild(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildInput!
  ): UpdateChildPayload

  """
  Updates a single `Child` using its globally unique id and a patch.
  """
  updateChildById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChildByIdInput!
  ): UpdateChildPayload

  """
  Updates a single `Parent` using a unique key and a patch.
  """
  updateParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentInput!
  ): UpdateParentPayload

  """
  Updates a single `Parent` using its globally unique id and a patch.
  """
  updateParentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateParentByIdInput!
  ): UpdateParentPayload

  """
  Updates a single `School` using a unique key and a patch.
  """
  updateSchool(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSchoolInput!
  ): UpdateSchoolPayload

  """
  Updates a single `School` using its globally unique id and a patch.
  """
  updateSchoolById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSchoolByIdInput!
  ): UpdateSchoolPayload

  """
  Updates a single `Student` using a unique key and a patch.
  """
  updateStudent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStudentInput!
  ): UpdateStudentPayload

  """
  Updates a single `Student` using its globally unique id and a patch.
  """
  updateStudentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStudentByIdInput!
  ): UpdateStudentPayload

  """
  Updates a single `Teacher` using a unique key and a patch.
  """
  updateTeacher(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeacherInput!
  ): UpdateTeacherPayload

  """
  Updates a single `Teacher` using its globally unique id and a patch.
  """
  updateTeacherById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeacherByIdInput!
  ): UpdateTeacherPayload
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
}

type Parent implements Node {
  """
  Reads and enables pagination through a set of `Child`.
  """
  childrenByDadParentId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Child`.
    """
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection!

  """
  Reads and enables pagination through a set of `Child`.
  """
  childrenByMomParentId(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Child`.
    """
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  parentName: String!
  rowId: Int!
}

"""
Relationship connect by node id input field for parent in the parentByMyDadParentId relationship
"""
input ParentByMyDadParentIdConnectByNodeIdInput {
  """
  The node id input field to connect parent in the parentByMyDadParentId relationship
  """
  id: ID!
}

"""
The Parent to be created by this mutation.
"""
input ParentByMyDadParentIdCreateInput {
  """
  Nested connector type for childrenByTheirDadParentId
  """
  childrenByDadParentId: ChildrenByTheirDadParentIdInput

  """
  Nested connector type for childrenByTheirMomParentId
  """
  childrenByMomParentId: ChildrenByTheirMomParentIdInput
  parentName: String!
  rowId: Int
}

"""
Relationship input type for parentByMyDadParentId
"""
input ParentByMyDadParentIdInput {
  """
  Connect parent by node id in the parentByMyDadParentId relationship
  """
  connectById: ParentByMyDadParentIdConnectByNodeIdInput

  """
  A Parent created and linked to this object
  """
  create: ParentByMyDadParentIdCreateInput
}

"""
Relationship connect by node id input field for parent in the parentByMyMomParentId relationship
"""
input ParentByMyMomParentIdConnectByNodeIdInput {
  """
  The node id input field to connect parent in the parentByMyMomParentId relationship
  """
  id: ID!
}

"""
The Parent to be created by this mutation.
"""
input ParentByMyMomParentIdCreateInput {
  """
  Nested connector type for childrenByTheirDadParentId
  """
  childrenByDadParentId: ChildrenByTheirDadParentIdInput

  """
  Nested connector type for childrenByTheirMomParentId
  """
  childrenByMomParentId: ChildrenByTheirMomParentIdInput
  parentName: String!
  rowId: Int
}

"""
Relationship input type for parentByMyMomParentId
"""
input ParentByMyMomParentIdInput {
  """
  Connect parent by node id in the parentByMyMomParentId relationship
  """
  connectById: ParentByMyMomParentIdConnectByNodeIdInput

  """
  A Parent created and linked to this object
  """
  create: ParentByMyMomParentIdCreateInput
}

"""
A condition to be used against `Parent` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ParentCondition {
  """
  Checks for equality with the object’s `rowId` field.
  """
  rowId: Int
}

"""
A connection to a list of `Parent` values.
"""
type ParentConnection {
  """
  A list of edges which contains the `Parent` and cursor to aid in pagination.
  """
  edges: [ParentEdge]!

  """
  A list of `Parent` objects.
  """
  nodes: [Parent]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Parent` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Parent` edge in the connection.
"""
type ParentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Parent` at the end of the edge.
  """
  node: Parent
}

"""
An input for mutations affecting `Parent`
"""
input ParentInput {
  """
  Nested connector type for childrenByTheirDadParentId
  """
  childrenByDadParentId: ChildrenByTheirDadParentIdInput

  """
  Nested connector type for childrenByTheirMomParentId
  """
  childrenByMomParentId: ChildrenByTheirMomParentIdInput
  parentName: String!
  rowId: Int
}

"""
Methods to use when ordering `Parent`.
"""
enum ParentOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Parent`. Fields that are set will be updated.
"""
input ParentPatch {
  """
  Nested connector type for childrenByTheirDadParentId
  """
  childrenByDadParentId: ChildrenByTheirDadParentIdInput

  """
  Nested connector type for childrenByTheirMomParentId
  """
  childrenByMomParentId: ChildrenByTheirMomParentIdInput
  parentName: String
  rowId: Int
}

"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  """
  Get a single `Child`.
  """
  child(rowId: Int!): Child

  """
  Reads a single `Child` using its globally unique `ID`.
  """
  childById(
    """
    The globally unique `ID` to be used in selecting a single `Child`.
    """
    id: ID!
  ): Child

  """
  Reads and enables pagination through a set of `Child`.
  """
  children(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChildCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Child`.
    """
    orderBy: [ChildOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChildConnection

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    id: ID!
  ): Node

  """
  Get a single `Parent`.
  """
  parent(rowId: Int!): Parent

  """
  Reads a single `Parent` using its globally unique `ID`.
  """
  parentById(
    """
    The globally unique `ID` to be used in selecting a single `Parent`.
    """
    id: ID!
  ): Parent

  """
  Reads and enables pagination through a set of `Parent`.
  """
  parents(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ParentCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Parent`.
    """
    orderBy: [ParentOrderBy!] = [PRIMARY_KEY_ASC]
  ): ParentConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  Get a single `School`.
  """
  school(rowId: Int!): School

  """
  Reads a single `School` using its globally unique `ID`.
  """
  schoolById(
    """
    The globally unique `ID` to be used in selecting a single `School`.
    """
    id: ID!
  ): School

  """
  Reads and enables pagination through a set of `School`.
  """
  schools(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SchoolCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `School`.
    """
    orderBy: [SchoolOrderBy!] = [PRIMARY_KEY_ASC]
  ): SchoolConnection

  """
  Get a single `Student`.
  """
  student(schoolId: Int!, studentId: Int!): Student

  """
  Reads a single `Student` using its globally unique `ID`.
  """
  studentById(
    """
    The globally unique `ID` to be used in selecting a single `Student`.
    """
    id: ID!
  ): Student

  """
  Reads and enables pagination through a set of `Student`.
  """
  students(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StudentCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Student`.
    """
    orderBy: [StudentOrderBy!] = [PRIMARY_KEY_ASC]
  ): StudentConnection

  """
  Get a single `Teacher`.
  """
  teacher(otherId: Int!): Teacher

  """
  Reads a single `Teacher` using its globally unique `ID`.
  """
  teacherById(
    """
    The globally unique `ID` to be used in selecting a single `Teacher`.
    """
    id: ID!
  ): Teacher

  """
  Reads and enables pagination through a set of `Teacher`.
  """
  teachers(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeacherCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Teacher`.
    """
    orderBy: [TeacherOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeacherConnection
}

type School implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  name: String!
  rowId: Int!

  """
  Reads and enables pagination through a set of `Student`.
  """
  students(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StudentCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Student`.
    """
    orderBy: [StudentOrderBy!] = [PRIMARY_KEY_ASC]
  ): StudentConnection!

  """
  Reads and enables pagination through a set of `Teacher`.
  """
  teachers(
    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeacherCondition

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `Teacher`.
    """
    orderBy: [TeacherOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeacherConnection!
}

"""
Relationship connect by node id input field for school in the schoolByMySchoolId relationship
"""
input SchoolByMySchoolIdConnectByNodeIdInput {
  """
  The node id input field to connect school in the schoolByMySchoolId relationship
  """
  id: ID!
}

"""
The School to be created by this mutation.
"""
input SchoolByMySchoolIdCreateInput {
  name: String!
  rowId: Int

  """
  Nested connector type for studentsByTheirSchoolId
  """
  studentsBySchoolId: StudentsByTheirSchoolIdInput

  """
  Nested connector type for teachersByTheirSchoolId
  """
  teachersBySchoolId: TeachersByTheirSchoolIdInput
}

"""
Relationship input type for schoolByMySchoolId
"""
input SchoolByMySchoolIdInput {
  """
  Connect school by node id in the schoolByMySchoolId relationship
  """
  connectById: SchoolByMySchoolIdConnectByNodeIdInput

  """
  A School created and linked to this object
  """
  create: SchoolByMySchoolIdCreateInput
}

"""
A condition to be used against `School` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SchoolCondition {
  """
  Checks for equality with the object’s `rowId` field.
  """
  rowId: Int
}

"""
A connection to a list of `School` values.
"""
type SchoolConnection {
  """
  A list of edges which contains the `School` and cursor to aid in pagination.
  """
  edges: [SchoolEdge]!

  """
  A list of `School` objects.
  """
  nodes: [School]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `School` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `School` edge in the connection.
"""
type SchoolEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `School` at the end of the edge.
  """
  node: School
}

"""
An input for mutations affecting `School`
"""
input SchoolInput {
  name: String!
  rowId: Int

  """
  Nested connector type for studentsByTheirSchoolId
  """
  studentsBySchoolId: StudentsByTheirSchoolIdInput

  """
  Nested connector type for teachersByTheirSchoolId
  """
  teachersBySchoolId: TeachersByTheirSchoolIdInput
}

"""
Methods to use when ordering `School`.
"""
enum SchoolOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `School`. Fields that are set will be updated.
"""
input SchoolPatch {
  name: String
  rowId: Int

  """
  Nested connector type for studentsByTheirSchoolId
  """
  studentsBySchoolId: StudentsByTheirSchoolIdInput

  """
  Nested connector type for teachersByTheirSchoolId
  """
  teachersBySchoolId: TeachersByTheirSchoolIdInput
}

type Student implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `School` that is related to this `Student`.
  """
  school: School
  schoolId: Int!

  """
  Reads a single `Child` that is related to this `Student`.
  """
  student: Child
  studentId: Int!
}

"""
A condition to be used against `Student` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input StudentCondition {
  """
  Checks for equality with the object’s `schoolId` field.
  """
  schoolId: Int

  """
  Checks for equality with the object’s `studentId` field.
  """
  studentId: Int
}

"""
A connection to a list of `Student` values.
"""
type StudentConnection {
  """
  A list of edges which contains the `Student` and cursor to aid in pagination.
  """
  edges: [StudentEdge]!

  """
  A list of `Student` objects.
  """
  nodes: [Student]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Student` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Student` edge in the connection.
"""
type StudentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Student` at the end of the edge.
  """
  node: Student
}

"""
An input for mutations affecting `Student`
"""
input StudentInput {
  """
  Nested connector type for childByMyStudentId
  """
  childByStudentId: ChildByMyStudentIdInput

  """
  Nested connector type for schoolByMySchoolId
  """
  schoolBySchoolId: SchoolByMySchoolIdInput
  schoolId: Int!
  studentId: Int!
}

"""
Methods to use when ordering `Student`.
"""
enum StudentOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SCHOOL_ID_ASC
  SCHOOL_ID_DESC
  STUDENT_ID_ASC
  STUDENT_ID_DESC
}

"""
Represents an update to a `Student`. Fields that are set will be updated.
"""
input StudentPatch {
  """
  Nested connector type for childByMyStudentId
  """
  childByStudentId: ChildByMyStudentIdInput

  """
  Nested connector type for schoolByMySchoolId
  """
  schoolBySchoolId: SchoolByMySchoolIdInput
  schoolId: Int
  studentId: Int
}

"""
Relationship connect by node id input field for student in the studentsByTheirSchoolId relationship
"""
input StudentsByTheirSchoolIdConnectByNodeIdInput {
  """
  The node id input field to connect student in the studentsByTheirSchoolId relationship
  """
  id: ID!
}

"""
The Student to be created by this mutation.
"""
input StudentsByTheirSchoolIdCreateInput {
  """
  Nested connector type for childByMyStudentId
  """
  childByStudentId: ChildByMyStudentIdInput

  """
  Nested connector type for schoolByMySchoolId
  """
  schoolBySchoolId: SchoolByMySchoolIdInput
  schoolId: Int
  studentId: Int
}

"""
Relationship input type for studentsByTheirSchoolId
"""
input StudentsByTheirSchoolIdInput {
  """
  Connect student by node id in the studentsByTheirSchoolId relationship
  """
  connectById: [StudentsByTheirSchoolIdConnectByNodeIdInput!]

  """
  A Student created and linked to this object
  """
  create: [StudentsByTheirSchoolIdCreateInput!]
}

"""
Relationship connect by node id input field for student in the studentsByTheirStudentId relationship
"""
input StudentsByTheirStudentIdConnectByNodeIdInput {
  """
  The node id input field to connect student in the studentsByTheirStudentId relationship
  """
  id: ID!
}

"""
The Student to be created by this mutation.
"""
input StudentsByTheirStudentIdCreateInput {
  """
  Nested connector type for childByMyStudentId
  """
  childByStudentId: ChildByMyStudentIdInput

  """
  Nested connector type for schoolByMySchoolId
  """
  schoolBySchoolId: SchoolByMySchoolIdInput
  schoolId: Int
  studentId: Int
}

"""
Relationship input type for studentsByTheirStudentId
"""
input StudentsByTheirStudentIdInput {
  """
  Connect student by node id in the studentsByTheirStudentId relationship
  """
  connectById: [StudentsByTheirStudentIdConnectByNodeIdInput!]

  """
  A Student created and linked to this object
  """
  create: [StudentsByTheirStudentIdCreateInput!]
}

type Teacher implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  name: String!
  otherId: Int!

  """
  Reads a single `School` that is related to this `Teacher`.
  """
  school: School
  schoolId: Int!
}

"""
A condition to be used against `Teacher` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeacherCondition {
  """
  Checks for equality with the object’s `otherId` field.
  """
  otherId: Int

  """
  Checks for equality with the object’s `schoolId` field.
  """
  schoolId: Int
}

"""
A connection to a list of `Teacher` values.
"""
type TeacherConnection {
  """
  A list of edges which contains the `Teacher` and cursor to aid in pagination.
  """
  edges: [TeacherEdge]!

  """
  A list of `Teacher` objects.
  """
  nodes: [Teacher]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Teacher` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Teacher` edge in the connection.
"""
type TeacherEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Teacher` at the end of the edge.
  """
  node: Teacher
}

"""
An input for mutations affecting `Teacher`
"""
input TeacherInput {
  name: String!
  otherId: Int

  """
  Nested connector type for schoolByMySchoolId
  """
  schoolBySchoolId: SchoolByMySchoolIdInput
  schoolId: Int!
}

"""
Methods to use when ordering `Teacher`.
"""
enum TeacherOrderBy {
  NATURAL
  OTHER_ID_ASC
  OTHER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SCHOOL_ID_ASC
  SCHOOL_ID_DESC
}

"""
Represents an update to a `Teacher`. Fields that are set will be updated.
"""
input TeacherPatch {
  name: String
  otherId: Int

  """
  Nested connector type for schoolByMySchoolId
  """
  schoolBySchoolId: SchoolByMySchoolIdInput
  schoolId: Int
}

"""
Relationship connect by node id input field for teacher in the teachersByTheirSchoolId relationship
"""
input TeachersByTheirSchoolIdConnectByNodeIdInput {
  """
  The node id input field to connect teacher in the teachersByTheirSchoolId relationship
  """
  id: ID!
}

"""
The Teacher to be created by this mutation.
"""
input TeachersByTheirSchoolIdCreateInput {
  name: String!
  otherId: Int

  """
  Nested connector type for schoolByMySchoolId
  """
  schoolBySchoolId: SchoolByMySchoolIdInput
  schoolId: Int!
}

"""
Relationship input type for teachersByTheirSchoolId
"""
input TeachersByTheirSchoolIdInput {
  """
  Connect teacher by node id in the teachersByTheirSchoolId relationship
  """
  connectById: [TeachersByTheirSchoolIdConnectByNodeIdInput!]

  """
  A Teacher created and linked to this object
  """
  create: [TeachersByTheirSchoolIdCreateInput!]
}

"""
All input for the `updateChildById` mutation.
"""
input UpdateChildByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Child` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Child` being updated.
  """
  patch: ChildPatch!
}

"""
All input for the `updateChild` mutation.
"""
input UpdateChildInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Child` being updated.
  """
  patch: ChildPatch!
  rowId: Int!
}

"""
The output of our update `Child` mutation.
"""
type UpdateChildPayload {
  """
  The `Child` that was updated by this mutation.
  """
  child: Child

  """
  An edge for our `Child`. May be used by Relay 1.
  """
  childEdge(
    """
    The method to use when ordering `Child`.
    """
    orderBy: [ChildOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ChildEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateParentById` mutation.
"""
input UpdateParentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Parent` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Parent` being updated.
  """
  patch: ParentPatch!
}

"""
All input for the `updateParent` mutation.
"""
input UpdateParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Parent` being updated.
  """
  patch: ParentPatch!
  rowId: Int!
}

"""
The output of our update `Parent` mutation.
"""
type UpdateParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Parent` that was updated by this mutation.
  """
  parent: Parent

  """
  An edge for our `Parent`. May be used by Relay 1.
  """
  parentEdge(
    """
    The method to use when ordering `Parent`.
    """
    orderBy: [ParentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ParentEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateSchoolById` mutation.
"""
input UpdateSchoolByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `School` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `School` being updated.
  """
  patch: SchoolPatch!
}

"""
All input for the `updateSchool` mutation.
"""
input UpdateSchoolInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `School` being updated.
  """
  patch: SchoolPatch!
  rowId: Int!
}

"""
The output of our update `School` mutation.
"""
type UpdateSchoolPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `School` that was updated by this mutation.
  """
  school: School

  """
  An edge for our `School`. May be used by Relay 1.
  """
  schoolEdge(
    """
    The method to use when ordering `School`.
    """
    orderBy: [SchoolOrderBy!]! = [PRIMARY_KEY_ASC]
  ): SchoolEdge
}

"""
All input for the `updateStudentById` mutation.
"""
input UpdateStudentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Student` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Student` being updated.
  """
  patch: StudentPatch!
}

"""
All input for the `updateStudent` mutation.
"""
input UpdateStudentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Student` being updated.
  """
  patch: StudentPatch!
  schoolId: Int!
  studentId: Int!
}

"""
The output of our update `Student` mutation.
"""
type UpdateStudentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `Student` that was updated by this mutation.
  """
  student: Student

  """
  An edge for our `Student`. May be used by Relay 1.
  """
  studentEdge(
    """
    The method to use when ordering `Student`.
    """
    orderBy: [StudentOrderBy!]! = [PRIMARY_KEY_ASC]
  ): StudentEdge
}

"""
All input for the `updateTeacherById` mutation.
"""
input UpdateTeacherByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Teacher` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Teacher` being updated.
  """
  patch: TeacherPatch!
}

"""
All input for the `updateTeacher` mutation.
"""
input UpdateTeacherInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  otherId: Int!

  """
  An object where the defined keys will be set on the `Teacher` being updated.
  """
  patch: TeacherPatch!
}

"""
The output of our update `Teacher` mutation.
"""
type UpdateTeacherPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  The `Teacher` that was updated by this mutation.
  """
  teacher: Teacher

  """
  An edge for our `Teacher`. May be used by Relay 1.
  """
  teacherEdge(
    """
    The method to use when ordering `Teacher`.
    """
    orderBy: [TeacherOrderBy!]! = [PRIMARY_KEY_ASC]
  ): TeacherEdge
}
