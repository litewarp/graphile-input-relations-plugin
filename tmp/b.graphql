"""All input for the create `Job` mutation."""
input CreateJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Job` to be created by this mutation."""
  job: JobInput!
}

"""The output of our create `Job` mutation."""
type CreateJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Job` that was created by this mutation."""
  job: Job

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobOrderBy!]! = [PRIMARY_KEY_ASC]
  ): JobEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `JobRelationship` mutation."""
input CreateJobRelationshipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `JobRelationship` to be created by this mutation."""
  jobRelationship: JobRelationshipInput!
}

"""The output of our create `JobRelationship` mutation."""
type CreateJobRelationshipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `JobRelationship` that was created by this mutation."""
  jobRelationship: JobRelationship

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteJobById` mutation."""
input DeleteJobByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Job` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteJob` mutation."""
input DeleteJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Job` mutation."""
type DeleteJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedJobId: ID

  """The `Job` that was deleted by this mutation."""
  job: Job

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobOrderBy!]! = [PRIMARY_KEY_ASC]
  ): JobEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Job implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `JobRelationship`."""
  jobRelationshipsByFromJobId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobRelationshipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `JobRelationship`."""
    orderBy: [JobRelationshipOrderBy!] = [NATURAL]
  ): JobRelationshipConnection!

  """Reads and enables pagination through a set of `JobRelationship`."""
  jobRelationshipsByToJobId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobRelationshipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `JobRelationship`."""
    orderBy: [JobRelationshipOrderBy!] = [NATURAL]
  ): JobRelationshipConnection!

  """Reads and enables pagination through a set of `Job`."""
  jobsByJobRelationshipFromJobIdAndToJobId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Job`."""
    orderBy: [JobOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobJobsByJobRelationshipFromJobIdAndToJobIdManyToManyConnection!

  """Reads and enables pagination through a set of `Job`."""
  jobsByJobRelationshipFromJobIdAndToJobIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Job`."""
    orderBy: [JobOrderBy!]
  ): [Job!]!

  """Reads and enables pagination through a set of `Job`."""
  jobsByJobRelationshipToJobIdAndFromJobId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Job`."""
    orderBy: [JobOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobJobsByJobRelationshipToJobIdAndFromJobIdManyToManyConnection!

  """Reads and enables pagination through a set of `Job`."""
  jobsByJobRelationshipToJobIdAndFromJobIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Job`."""
    orderBy: [JobOrderBy!]
  ): [Job!]!
  name: String
  rowId: Int!
}

"""
A condition to be used against `Job` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input JobCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `Job` values."""
type JobConnection {
  """
  A list of edges which contains the `Job` and cursor to aid in pagination.
  """
  edges: [JobEdge]!

  """A list of `Job` objects."""
  nodes: [Job]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Job` you could get from the connection."""
  totalCount: Int!
}

"""A `Job` edge in the connection."""
type JobEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Job` at the end of the edge."""
  node: Job
}

"""An input for mutations affecting `Job`"""
input JobInput {
  """Nested connector type for jobRelationshipsByTheirFromJobId"""
  jobRelationshipsByFromJobId: JobRelationshipsByTheirFromJobIdInput

  """Nested connector type for jobRelationshipsByTheirToJobId"""
  jobRelationshipsByToJobId: JobRelationshipsByTheirToJobIdInput
  name: String
  rowId: Int
}

"""
A connection to a list of `Job` values, with data from `JobRelationship`.
"""
type JobJobsByJobRelationshipFromJobIdAndToJobIdManyToManyConnection {
  """
  A list of edges which contains the `Job`, info from the `JobRelationship`, and the cursor to aid in pagination.
  """
  edges: [JobJobsByJobRelationshipFromJobIdAndToJobIdManyToManyEdge!]!

  """A list of `Job` objects."""
  nodes: [Job]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Job` you could get from the connection."""
  totalCount: Int!
}

"""A `Job` edge in the connection, with data from `JobRelationship`."""
type JobJobsByJobRelationshipFromJobIdAndToJobIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `JobRelationship`."""
  jobRelationshipsByToJobId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobRelationshipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `JobRelationship`."""
    orderBy: [JobRelationshipOrderBy!] = [NATURAL]
  ): JobRelationshipConnection!

  """Reads and enables pagination through a set of `JobRelationship`."""
  jobRelationshipsByToJobIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobRelationshipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `JobRelationship`."""
    orderBy: [JobRelationshipOrderBy!]
  ): [JobRelationship!]!

  """The `Job` at the end of the edge."""
  node: Job
}

"""
A connection to a list of `Job` values, with data from `JobRelationship`.
"""
type JobJobsByJobRelationshipToJobIdAndFromJobIdManyToManyConnection {
  """
  A list of edges which contains the `Job`, info from the `JobRelationship`, and the cursor to aid in pagination.
  """
  edges: [JobJobsByJobRelationshipToJobIdAndFromJobIdManyToManyEdge!]!

  """A list of `Job` objects."""
  nodes: [Job]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Job` you could get from the connection."""
  totalCount: Int!
}

"""A `Job` edge in the connection, with data from `JobRelationship`."""
type JobJobsByJobRelationshipToJobIdAndFromJobIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `JobRelationship`."""
  jobRelationshipsByFromJobId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobRelationshipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `JobRelationship`."""
    orderBy: [JobRelationshipOrderBy!] = [NATURAL]
  ): JobRelationshipConnection!

  """Reads and enables pagination through a set of `JobRelationship`."""
  jobRelationshipsByFromJobIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobRelationshipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `JobRelationship`."""
    orderBy: [JobRelationshipOrderBy!]
  ): [JobRelationship!]!

  """The `Job` at the end of the edge."""
  node: Job
}

"""Methods to use when ordering `Job`."""
enum JobOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Represents an update to a `Job`. Fields that are set will be updated."""
input JobPatch {
  """Nested connector type for jobRelationshipsByTheirFromJobId"""
  jobRelationshipsByFromJobId: JobRelationshipsByTheirFromJobIdInput

  """Nested connector type for jobRelationshipsByTheirToJobId"""
  jobRelationshipsByToJobId: JobRelationshipsByTheirToJobIdInput
  name: String
  rowId: Int
}

type JobRelationship {
  """Reads a single `Job` that is related to this `JobRelationship`."""
  fromJob: Job
  fromJobId: Int

  """Reads a single `Job` that is related to this `JobRelationship`."""
  toJob: Job
  toJobId: Int
  type: String
}

"""
A condition to be used against `JobRelationship` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input JobRelationshipCondition {
  """Checks for equality with the object’s `fromJobId` field."""
  fromJobId: Int

  """Checks for equality with the object’s `toJobId` field."""
  toJobId: Int
}

"""A connection to a list of `JobRelationship` values."""
type JobRelationshipConnection {
  """
  A list of edges which contains the `JobRelationship` and cursor to aid in pagination.
  """
  edges: [JobRelationshipEdge]!

  """A list of `JobRelationship` objects."""
  nodes: [JobRelationship]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `JobRelationship` you could get from the connection.
  """
  totalCount: Int!
}

"""A `JobRelationship` edge in the connection."""
type JobRelationshipEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `JobRelationship` at the end of the edge."""
  node: JobRelationship
}

"""An input for mutations affecting `JobRelationship`"""
input JobRelationshipInput {
  fromJobId: Int
  toJobId: Int
  type: String
}

"""Methods to use when ordering `JobRelationship`."""
enum JobRelationshipOrderBy {
  FROM_JOB_ID_ASC
  FROM_JOB_ID_DESC
  NATURAL
  TO_JOB_ID_ASC
  TO_JOB_ID_DESC
}

"""The JobRelationship to be created by this mutation."""
input JobRelationshipsByTheirFromJobIdCreateInput {
  fromJobId: Int
  toJobId: Int
  type: String
}

"""Relationship input type for jobRelationshipsByTheirFromJobId"""
input JobRelationshipsByTheirFromJobIdInput {
  """A JobRelationship created and linked to this object"""
  create: [JobRelationshipsByTheirFromJobIdCreateInput!]
}

"""The JobRelationship to be created by this mutation."""
input JobRelationshipsByTheirToJobIdCreateInput {
  fromJobId: Int
  toJobId: Int
  type: String
}

"""Relationship input type for jobRelationshipsByTheirToJobId"""
input JobRelationshipsByTheirToJobIdInput {
  """A JobRelationship created and linked to this object"""
  create: [JobRelationshipsByTheirToJobIdCreateInput!]
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Job`."""
  createJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJobInput!
  ): CreateJobPayload

  """Creates a single `JobRelationship`."""
  createJobRelationship(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateJobRelationshipInput!
  ): CreateJobRelationshipPayload

  """Deletes a single `Job` using a unique key."""
  deleteJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJobInput!
  ): DeleteJobPayload

  """Deletes a single `Job` using its globally unique id."""
  deleteJobById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteJobByIdInput!
  ): DeleteJobPayload

  """Updates a single `Job` using a unique key and a patch."""
  updateJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJobInput!
  ): UpdateJobPayload

  """Updates a single `Job` using its globally unique id and a patch."""
  updateJobById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateJobByIdInput!
  ): UpdateJobPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Get a single `Job`."""
  job(rowId: Int!): Job

  """Reads a single `Job` using its globally unique `ID`."""
  jobById(
    """The globally unique `ID` to be used in selecting a single `Job`."""
    id: ID!
  ): Job

  """Reads and enables pagination through a set of `JobRelationship`."""
  jobRelationships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobRelationshipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `JobRelationship`."""
    orderBy: [JobRelationshipOrderBy!] = [NATURAL]
  ): JobRelationshipConnection

  """Reads and enables pagination through a set of `Job`."""
  jobs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JobCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Job`."""
    orderBy: [JobOrderBy!] = [PRIMARY_KEY_ASC]
  ): JobConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the `updateJobById` mutation."""
input UpdateJobByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Job` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Job` being updated.
  """
  patch: JobPatch!
}

"""All input for the `updateJob` mutation."""
input UpdateJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Job` being updated.
  """
  patch: JobPatch!
  rowId: Int!
}

"""The output of our update `Job` mutation."""
type UpdateJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Job` that was updated by this mutation."""
  job: Job

  """An edge for our `Job`. May be used by Relay 1."""
  jobEdge(
    """The method to use when ordering `Job`."""
    orderBy: [JobOrderBy!]! = [PRIMARY_KEY_ASC]
  ): JobEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}